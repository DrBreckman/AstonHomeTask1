package ru.sedov;

import java.util.Comparator;

/**
 * <p> Интерфейс, содержащий основные методы для хранения элементов одного типа в коллекции, их
 * удаления, изменения и сортировки. </p>
 * @param <T> тип элементов коллекции
 */
public interface MyList<T> {

    /**
     * <p> Возвращает текущее количество элементов находящихся в коллекции. </p>
     * @return количество находящихся элементов в коллекции.
     */
    int size();

    /**
     * <p> Добавляет элемент в конец коллекции. Если в коллекции недостаточно памяти для добавления нового элемента, то
     * фактический размер коллекции будет увеличен в два раза </p>
     * @param element объект, который будет добавлен в конец коллекции
     */
    void add(T element);

    /**
     * <p> Добавляет элемент в колекцию на соответственную позицию.
     * Если в коллекции недостаточно памяти для добавления нового элемента, то
     * фактический размер коллекции будет увеличен в два раза.
     * Если в коллекции нет элемента с заданным индексом,
     * то будет вызвано исключение IndexOutOfBoundsException</p>
     * @param element объект, который будет добавлен в коллекцию под индексом.
     * @param index индекс позиции, на которую будет добавлен новый элемент.
     * @throws IndexOutOfBoundsException если в коллекции нет элемента с заданным индексом.
     */
    void add(T element, int index);

    /**
     * <p> Возвращает значение элемента по индексу. если в коллекции нет элемента с заданным индексом, то будет
     * выброшено исключение IndexOutOfBoundsException</p>
     * @param index индекс элемента, который будет возвращен
     * @throws IndexOutOfBoundsException если в коллекции нет элемента с заданным индексом.
     * @return элемент коллекции с индексом index
     */
    T get(int index);

    /**
     * <p> Удаляет элемент коллекции по заданному индексу. Если элемента с таким индексом нет, то будет
     * вызвано исключение IndexOutOfBoundsException</p>
     * @param index индекс элемента, который будет удален
     * @throws IndexOutOfBoundsException если в коллекции нет элемента с заданным индексом.
     */
    void remove(int index);

    /**
     * Удаляет все эелементы коллекции, оставляя текущий фактический размер коллекции.
     */
    void clear();

    /**
     * <p> Сортирует элементы коллекции в соответствии с переданным компаратором. </p>
     * @param comparator компаратор, который используется для сравнения элементов коллекции.
     * @throws NullPointerException если передать в качестве параметра null значение
     */
    void sort(Comparator<T> comparator);

    /**
     * <p> Заменяет существующий элемент с заданым индексом на новый элемент. Если элемента с таким индексом нет,
     * будет выброшено исключение IndexOutOfBoundsException.</p>
     * @param element элемент, который заменит собой другой, уже существующий элемент.
     * @param index индекс элемента, который будет замещен.
     * @throws IndexOutOfBoundsException если в коллекции нет элемента с заданым индексом.
     */
    void replace(T element, int index);

    /**
     * Возвращает элементы коллекции в виде массива.
     * @param clazz тип элементов для преобразования коллекции в массив
     * @return массив элементов коллекции
     */
    T[] toArray(Class<T> clazz);
}
